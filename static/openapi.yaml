openapi: 3.0.3
info:
  title: Invoice Collector Container
  version: '0.1'
servers:
  - url: https://api.invoice-collector.com/api/v1
  - url: https://localhost:8080/api/v1
paths:
  "/authorize":
    post:
      summary: Authorize (DEPRECATED)
      description: DEPRECATED! Use [`/user`](#tag/User/paths/~1user/post) instead. Just replace `/authorize` with `/user` and it will work the same way.
  "/ui":
    get:
      summary: UI
      description: UI used by the user to manage its credentials.
      parameters:
        - in: query
          name: token
          required: true
          schema:
            "$ref": "#/components/schemas/token"
        - in: query
          name: verificationCode
          required: false
          schema:
            "$ref": "#/components/schemas/verificationCode"
      responses:
        '200':
          description: Success
          content:
            text/html:
              schema:
                type: string
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/test_callback":
    get:
      summary: Test Callback
      description: Request the server to send a callback request with a fake invoice.
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized - Invalid bearer token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      callbacks:
        onInvoiceCollected:
          Invoice:
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Type of the payload.
                          enum:
                            - invoice
                          example: invoice
                        id:
                          type: string
                          description: Id of the collector.
                          example: free
                        remote_id:
                          type: string
                          description: Remote id of the user.
                          example: R121439
                        invoice:
                          "$ref": "#/components/schemas/invoice"
                      required:
                        - type
                        - id
                        - remote_id
                        - invoice
              responses:
                '200':
                  description: Success
                '400':
                  description: Error
        onCollectorDisconnected:
          Notification Disconnected:
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Type of the payload.
                          example: notification_disconnected
                        id:
                          type: string
                          description: Id of the collector.
                          example: free
                        credential_id:
                          type: string
                          description: Id of the credential.
                          example: 6776b5258821de266afbc3f6
                        user_id:
                          type: string
                          description: Id of the user.
                          example: 687108e5dce5050bc8ca53c1
                        remote_id:
                          type: string
                          description: Remote id of the user.
                          example: R121439
                      required:
                        - type
                        - id
                        - credential_id
                        - user_id
                        - remote_id
              responses:
                '200':
                  description: Success
                '400':
                  description: Error
  "/login":
    post:
      summary: Login
      description: Login to the Invoice Collector API. _This endpoint is used to get a bearer token for the customer._
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the customer.
                  example: customer@example.com
                password:
                  type: string
                  description: Password of the customer.
                  example: securepassword123
              required:
              - email
              - password
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/bearer_response"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/signup":
    post:
      summary: Signup
      description: Signup a new customer. _If the email is already used, a password reset link will be sent by email. `name` is not mandatory in case of password reset._
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the customer.
                  example: customer@example.com
                name:
                  type: string
                  description: Name of the company.
                  example: Awesome Company
              required:
              - email
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/reset":
    post:
      summary: Reset
      description: Reset the password of the customer.
      tags:
        - Authentication
      parameters:
        - in: query
          name: token
          required: true
          schema:
            "$ref": "#/components/schemas/reset_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: New password of the customer.
                  example: newsecurepassword123
              required:
              - password
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid reset token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/bearer":
    post:
      summary: Bearer
      description: Create a new bearer token for the customer. _This token must be used by the client to authenticate itself while using the API._
      tags:
        - Authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            "$ref": "#/components/schemas/bearer"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/bearer_response"
        '401':
          description: Unauthorized - Invalid bearer token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/customer":
    get:
      summary: Customer
      description: Get your informations.
      tags:
        - Customer
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            "$ref": "#/components/schemas/bearer"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/customer"
        '401':
          description: Unauthorized - Invalid bearer token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Customer
      description: Update your informations.
      tags:
        - Customer
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            "$ref": "#/components/schemas/bearer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the customer.
                  example: Awesome Company Name
                callback:
                  type: string
                  description: Callback url at which the new invoices are sent.
                  example: https://path.to/callback
                remoteId:
                  type: string
                  description: Remote id of your company in your system. Invoice-Collectors's invoices will be sent along with this id to the callback URL.
                  example: R121439
                theme:
                  type: string
                  description: Theme of the customer.
                  example: dark
                subscribedCollectors:
                  type: array
                  description: List of collector ids the customer is subscribed to.
                  items:
                    type: string
                  example: ["amazon", "shopify", "free"]
                isSubscribedToAll:
                  type: boolean
                  description: Whether the customer is subscribed to all collectors.
                  example: false
                displaySketchCollectors:
                  type: boolean
                  description: Whether to display sketch collectors.
                  example: false
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid bearer token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/customer/bearer":
    post:
      summary: Bearer
      description: Create a new bearer token for the customer and replace the previous one. _This token must be used by the client to authenticate itself while using the API._
      tags:
        - Customer
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            "$ref": "#/components/schemas/bearer"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/bearer_response"
        '401':
          description: Unauthorized - Invalid bearer token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/users":
    get:
      summary: Users
      description: List all the users of the customer.
      tags:
        - User
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            "$ref": "#/components/schemas/bearer"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/user"
        '401':
          description: Unauthorized - Invalid bearer token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/user":
    post:
      summary: User
      description: Create a new user or update an existing one. Generate a token for a specific user. _This token must be used by the client to authenticate itself. The user is created if it does not exist._
      tags:
        - User
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            "$ref": "#/components/schemas/bearer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/authorization_body"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/authorization_response"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid bearer token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/user/{id}":
    delete:
      summary: User
      description: Delete the user and all its credentials. _By deleting the user, you are also deleting the terms of use acceptance. The user will be asked to accept the terms of use again when it will try to authorize again._
      tags:
        - User
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            "$ref": "#/components/schemas/bearer"
        - in: path
          name: id
          required: true
          schema:
            "$ref": "#/components/schemas/user_id"
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid bearer token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/credentials":
    get:
      summary: Credentials
      description: List all the credentials for the user. _You need to authenticate using token or bearer._
      tags:
        - Credential
      parameters:
        - in: query
          name: token
          schema:
            "$ref": "#/components/schemas/token"
        - in: header
          name: Authorization
          schema:
            "$ref": "#/components/schemas/bearer"
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/credentials"
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/credential":
    post:
      summary: Credential
      description: Add a new credential for the given user. _You need to authenticate using token or bearer._
      tags:
        - Credential
      parameters:
        - in: query
          name: token
          schema:
            "$ref": "#/components/schemas/token"
        - in: header
          name: Authorization
          schema:
            "$ref": "#/components/schemas/bearer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Id of the collector to use.
                  example: free
                params:
                  type: object
                  description: Parameters required by the collector.
                  example:
                    id: "fbx123456789"
                    password: "Y%2j7Fc$#$y"
                    note: "The company Free account"
              required:
              - id
              - params
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/credential_id_object"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/credential/{id}":
    get:
      summary: Credential
      description: Get information about a specific credential. _You need to authenticate using token or bearer._
      tags:
        - Credential
      parameters:
        - in: query
          name: token
          schema:
            "$ref": "#/components/schemas/token"
        - in: header
          name: Authorization
          schema:
            "$ref": "#/components/schemas/bearer"
        - in: path
          name: id
          required: true
          schema:
            "$ref": "#/components/schemas/credential_id"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/credential"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    delete:
      summary: Credential
      description: Delete the credential for the given user. _You need to authenticate using token or bearer._
      tags:
        - Credential
      parameters:
        - in: query
          name: token
          schema:
            "$ref": "#/components/schemas/token"
        - in: header
          name: Authorization
          schema:
            "$ref": "#/components/schemas/bearer"
        - in: path
          name: id
          required: true
          schema:
            "$ref": "#/components/schemas/credential_id"
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/credential/{id}/2fa":
    post:
      summary: 2FA
      description: Set the 2FA code for the given credential. _You need to authenticate using token or bearer._
      tags:
        - Credential
      parameters:
        - in: query
          name: token
          schema:
            "$ref": "#/components/schemas/token"
        - in: header
          name: Authorization
          schema:
            "$ref": "#/components/schemas/bearer"
        - in: path
          name: id
          required: true
          schema:
            "$ref": "#/components/schemas/credential_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: 2FA code to use.
                  example: 359731
              required:
              - code
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/credential/{id}/collect":
    post:
      summary: Collect
      description:  Request a collect for the given credential. _You need to authenticate using token or bearer._
      tags:
        - Credential
      parameters:
        - in: query
          name: token
          schema:
            "$ref": "#/components/schemas/token"
        - in: header
          name: Authorization
          schema:
            "$ref": "#/components/schemas/bearer"
        - in: path
          name: id
          required: true
          schema:
            "$ref": "#/components/schemas/credential_id"
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/collectors":
    get:
      summary: Collectors
      description: List all the available collectors. _You can authenticate using token or bearer. If any authentication is provided, only the collectors the customer is subscribed to will be returned._
      tags:
        - Collector
      parameters:
        - in: query
          name: locale
          required: false
          schema:
            "$ref": "#/components/schemas/locale"
        - in: query
          name: token
          schema:
            "$ref": "#/components/schemas/token"
        - in: header
          name: Authorization
          schema:
            "$ref": "#/components/schemas/bearer"
      responses:
        '200':
          description: List of available collectors.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/collector"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/feedback":
    post:
      summary: Feedback
      description: Send a feedback to the Invoice-Collector team. _You need to authenticate using token or bearer._
      tags:
        - Feedback
      parameters:
        - in: query
          name: token
          schema:
            "$ref": "#/components/schemas/token"
        - in: header
          name: Authorization
          schema:
            "$ref": "#/components/schemas/bearer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: Feedback type.
                  example: custom
                message:
                  type: string
                  description: Feedback message.
                  example: Missing feature...
                email:
                  type: string
                  description: Email of the user. _The email is optional and is used to contact the user if needed._
                  example: user@example.com
              required:
              - type
              - message
components:
  schemas:
    locale:
      type: string
      description: Language of the user.
      enum: [en, fr]
      default: en
      example: fr
    bearer:
      type: string
      description: Bearer token to authenticate the customer.
      example: Bearer <token>
    bearer_response:
      type: object
      properties:
        bearer:
          type: string
          description: Bearer token to be used in the Authorization header.
          example: qHcFyrYj.....yQ77/q0=
      required:
        - bearer
    remote_id:
      type: string
      description: Remote id of the user.
      example: R121439
    authorization_body:
      type: object
      properties:
        remote_id:
          "$ref": "#/components/schemas/remote_id"
        locale:
          "$ref": "#/components/schemas/locale"
        email:
          type: string
          description: Email of the user. _This email is used to send the [Trems of Use](/terms-of-use)._
          example: user@example.com
      required:
      - remote_id
      - locale
      - email
    authorization_response:
      allOf:
        - "$ref": "#/components/schemas/user"
        - type: object
          properties:
            token:
              type: string
              description: Token to be used by the client.
              example: 69b67c9f...be77ffeb
      required:
      - token
    token:
      type: string
      description: Token to be used by the client. _You can get it using the [`/user`](#tag/User/paths/~1user/post) endpoint._
      example: <token>
    reset_token:
      type: string
      description: Token to be used for password reset. _You can get it using the [`/signup`](#tag/Authentication/paths/~1signup/post) endpoint._
      example: <reset_token>
    verificationCode:
      type: string
      description: Verification code received by email. _Leave it empty if the user did not receive any._
      example: 654972
    credential_id_object:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/credential_id"
      required:
      - id
    credential_id:
        type: string
        description: Id of the credential.
        example: 6776b5258821de266afbc3f6
    user_id:
        type: string
        description: Id of the user.
        example: 687f40dab93991306da5ccf3
    credentials:
      type: array
      description: List of credentials.
      items:
        "$ref": "#/components/schemas/credential"
    credential:
      type: object
      properties:
        id:
          type: string
          description: Id of the credential.
          example: 6776b5258821de266afbc3f6
        user_id:
          type: string
          description: Id of the user.
          example: 687108e5dce5050bc8ca53c1
        note:
          type: string
          description: Custom note for this credential.
          example: Regular account
        create_timestamp:
          type: number
          description: Creation timestamp.
          example: 1745229262287
        last_collect_timestamp:
          type: number
          description: Last collect timestamp.
          example: 1745229265118
        next_collect_timestamp:
          type: number
          description: Next collect timestamp.
          example: 1746000402000
        invoices:
          type: array
          description: List of invoices collected by this credential.
          items:
            type: object
            properties:
              id:
                type: string
                description: Id of the invoice.
                example: 45FDD1544
              timestamp:
                type: integer
                description: Timestamp when the invoice was created in ms.
                example: 17316031963975
              downloaded_timestamp:
                type: integer
                description: Timestamp when the invoice was downloaded in ms. `null` if the invoice was not downloaded.
                example: 17316032013467
            required:
            - id
            - timestamp
            - downloaded_timestamp
        state:
          "$ref": "#/components/schemas/state"
        collector:
          "$ref": "#/components/schemas/collector"
      required:
      - id
      - user_id
      - note
      - create_timestamp
      - last_collect_timestamp
      - next_collect_timestamp
      - state
      - invoices
      - collector
    customer:
      type: object
      properties:
        id:
          type: string
          description: Id of the customer.
          example: 6795130f170ba4496dc30642
        email:
          type: string
          description: Email of the customer.
          example: customer@company.com
        name:
          type: string
          description: Name of the customer.
          example: Awesome Company Name
        callback:
          type: string
          description: Callback url at which the new invoices are sent.
          example: https://path.to/callback
        remoteId:
          type: string
          description: Remote id of your company in your system. Invoice-Collectors's invoices will be sent along with this id to the callback URL.
          example: R121439
        theme:
          type: string
          description: Theme of the customer.
          example: dark
        subscribedCollectors:
          type: array
          description: List of collector ids the customer is subscribed to.
          items:
            type: string
          example: ["amazon", "shopify", "free"]
        isSubscribedToAll:
          type: boolean
          description: Whether the customer is subscribed to all collectors. _If true, the `subscribedCollectors` field is ignored._
          example: false
        displaySketchCollectors:
          type: boolean
          description: Whether to display sketch collectors.
          example: false
        maxDelayBetweenCollect:
          type: number
          description: Maximum delay between two collects in ms.
          example: 2592000000
      required:
        - id
        - email
        - name
        - callback
        - theme
        - subscribedCollectors
        - isSubscribedToAll
        - displaySketchCollectors
        - maxDelayBetweenCollect
    user:
      type: object
      properties:
        id:
          type: string
          description: Id of the user.
          example: 6776b5258821de266afbc3f6
        customer_id:
          type: string
          description: Id of the customer.
          example: 6795130f170ba4496dc30642
        remote_id:
          "$ref": "#/components/schemas/remote_id"
        locale:
          "$ref": "#/components/schemas/locale"
      required:
      - id
      - customer_id
      - remote_id
      - locale
    state:
      type: object
      properties:
        index:
          type: number
          description: Index of the state. _A negative index means that the state is in error. An index equal to max means that the process is finished._
          example: 2
        max:
          type: number
          description: Maximum index of the state. _This is used to know the progress._
          example: 6
        title:
          type: string
          description: Title of the state.
          example: 2FA
        message:
          type: string
          description: Message to be displayed to the user.
          example: Please enter the code received by SMS.
      required:
      - index
      - max
      - title
      - message
    collector:
      type: object
      properties:
        id:
          type: string
          description: Id of the collector.
          example: free
        name:
          type: string
          description: Name of the collector.
          example: Free
        description:
          type: string
          description: Description of the collector.
          example: Free is a French telecommunications company
        instructions:
          type: string
          description: Instructions to setup the collector.
          example: Go to ... and do ...
        version:
          type: string
          description: Version of the collector.
          example: 1
        type:
          type: string
          description: Type of collector.
          enum: [web, api]
          example: web
        website:
          type: string
          description: Link to the website of the collector.
          format: uri
          example: https://www.free.fr
        logo:
          type: string
          description: Link to the logo of the collector.
          format: uri
          example: https://fr.wikipedia.org/wiki/Free_(entreprise)#/media/Fichier:Free_logo.svg
        useProxy:
          type: boolean
          description: Whether the collector uses a proxy or not.
          example: true
        params:
          type: object
          description: List of parameters that the collector requires.
          additionalProperties:
            type: object
            properties:
              type:
                type: string
                description: Type of the parameter.
                enum: [string, number, boolean, enum]
                example: string
              name:
                type: string
                description: Name of the parameter.
                example: Email
              placeholder:
                type: string
                description: Placeholder of the parameter.
                example: Email of the account
              mandatory:
                type: boolean
                description: Whether the parameter is mandatory or not.
                example: true
            required:
             - type
             - name
             - placeholder
             - mandatory
        entryUrl:
          type: string
          description: URL to the entry point of the collector. For collectors of type `web` only.
          example: https://www.mycollector.com/login
        baseUrl:
          type: string
          description: Base URL of the collector. For collectors of type `api` only.
          example: https://api.mycollector.com
      required:
      - id
      - name
      - description
      - version
      - type
      - website
      - logo
      - useProxy
      - params
    invoice:
      type: object
      properties:
        id:
          type: string
          description: Id of the invoice.
          example: 45FDD1544
        timestamp:
          type: integer
          description: Timestamp when the invoice was created in ms.
          example: 17316031963975
        downloaded_timestamp:
          type: integer
          description: Timestamp when the invoice was downloaded in ms.
          example: 17316032013467
        amount:
          type: string
          description: Amount of the invoice.
          example: 45.78€
        link:
          type: string
          description: Link from which the invoice was downloaded.
          example: https://mycollector/direct/link/to/my/invoice
        data:
          type: string
          description: Base64 encoded invoice.
          example: iVBORw0KGgoAAAAN...RU5ErkJggg==
        mimetype:
          type: string
          description: MIME type of the invoice.
          example: application/pdf
      required:
        - id
        - type
        - mimetype
        - timestamp
        - downloaded_timestamp
        - link
        - data
    error:
      type: object
      properties:
        type:
          type: string
          description: Type of the error.
          default: error
          exemple: error
          enum: [error]
        message:
          type: string
          description: Error message.
      required:
        - type
        - message
