openapi: 3.0.3
info:
  title: Invoice Collector Container
  version: '0.1'
servers:
  - url: https://api.invoice-collector.com/api/v1
  - url: https://localhost:8080/api/v1
paths:
  "/collectors":
    get:
      summary: Collectors
      description: List all the available collectors.
      parameters:
        - in: query
          name: locale
          required: false
          schema:
            "$ref": "#/components/schemas/locale"
      responses:
        '200':
          description: List of available collectors
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/collector"
        '400':
          description: Bed Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/customer":
    get:
      summary: Customer
      description: Get information about the you, the customer.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            "$ref": "#/components/schemas/bearer"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/customer"
        '401':
          description: Unauthorized - Invalid bearer token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/authorize":
    post:
      summary: Authorize
      description: Generate a token for a specific user. This token must be used by the client to authenticate itself. The user is created if it does not exist.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            "$ref": "#/components/schemas/bearer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/authorization_body"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/authorization_response"
        '400':
          description: Bed Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid bearer token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/user":
    delete:
      summary: User
      description: Delete the user and all its credentials.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            "$ref": "#/components/schemas/bearer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                remote_id:
                  "$ref": "#/components/schemas/remote_id"
              required:
              - remote_id
      responses:
        '200':
          description: Success
        '400':
          description: Bed Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    get:
      summary: User
      description: UI used by the user to manage its credentials.
      parameters:
        - in: query
          name: token
          required: true
          schema:
            "$ref": "#/components/schemas/token"
      responses:
        '200':
          description: Success
          content:
            text/html:
              schema:
                type: string
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/credentials":
    get:
      summary: Credentials
      description: List all the credentials for the user.
      parameters:
        - in: query
          name: token
          required: true
          schema:
            "$ref": "#/components/schemas/token"
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/credentials"
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/credential":
    post:
      summary: Credential
      description: Add a new credential for the given user.
      parameters:
        - in: query
          name: token
          required: true
          schema:
            "$ref": "#/components/schemas/token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Id of the collector to use.
                  example: free
                params:
                  type: object
                  description: Parameters required by the collector.
                  example:
                    id: "fbx123456789"
                    password: "Y%2j7Fc$#$y"
                    note: "The company Free account"
              required:
              - id
              - params
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/credential_id_object"
        '400':
          description: Bed Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/credential/{id}":
    get:
      summary: Credential
      description: Get information about a specific credential.
      parameters:
        - in: query
          name: token
          required: true
          schema:
            "$ref": "#/components/schemas/token"
        - in: path
          name: id
          required: true
          schema:
            "$ref": "#/components/schemas/credential_id"
      responses:
        '200':
          description: Success
        '400':
          description: Bed Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    delete:
      summary: Credential
      description: Delete the credential for the given user.
      parameters:
        - in: query
          name: token
          required: true
          schema:
            "$ref": "#/components/schemas/token"
        - in: path
          name: id
          required: true
          schema:
            "$ref": "#/components/schemas/credential_id"
      responses:
        '200':
          description: Success
        '400':
          description: Bed Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Unauthorized - Invalid oauth token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/test_callback":
    get:
      summary: Test Callback
      description: Request the server to send a callback request with a fake invoice.
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized - Invalid bearer token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      callbacks:
        onInvoiceCollected:
          Invoice:
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Type of the payload.
                          enum:
                            - invoice
                          example: invoice
                        id:
                          type: string
                          description: Id of the collector.
                          example: free
                        remote_id:
                          type: string
                          description: Remote id of the user.
                          example: 121439
                        invoice:
                          "$ref": "#/components/schemas/invoice"
                      required:
                        - type
                        - id
                        - remote_id
                        - invoice
              responses:
                '200':
                  description: Success
                '400':
                  description: Error
components:
  schemas:
    locale:
      type: string
      description: Language of the user.
      enum: [en, fr]
      default: en
      example: fr
    bearer:
      type: string
      description: Bearer token to authenticate the customer.
      example: Bearer <token>
    remote_id:
      type: string
      description: Remote id of the user.
      example: 121439
    authorization_body:
      type: object
      properties:
        remote_id:
          "$ref": "#/components/schemas/remote_id"
        locale:
          "$ref": "#/components/schemas/locale"
        email:
          type: string
          description: Email of the user. This email is used to send the [Trems of Use](/terms-of-use).
          example: user@example.com
      required:
      - remote_id
      - locale
      - email
    authorization_response:
      type: object
      properties:
        token:
          type: string
          description: Token to be used by the client.
          example: 69b67c9f...be77ffeb
      required:
      - token
    token:
      type: string
      description: Token to be used by the client. You can get it using the [`/authorize`](#/paths/~1authorize/post) endpoint.
      example: <token>
    credential_id_object:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/credential_id"
      required:
      - id
    credential_id:
        type: string
        description: Id of the credential.
        example: 6776b5258821de266afbc3f6
    credentials:
      type: array
      description: List of credentials.
      items:
        "$ref": "#/components/schemas/credential"
    credential:
      type: object
      properties:
        id:
          type: string
          description: Id of the credential.
          example: 6776b5258821de266afbc3f6
        note:
          type: string
          description: Custom note for this credential.
          example: Regular account
        create_timestamp:
          type: number
          description: Creation timestamp.
          example: 1745229262287
        last_collect_timestamp:
          type: number
          description: Last collect timestamp.
          example: 1745229265118
        next_collect_timestamp:
          type: number
          description: Next collect timestamp.
          example: 1746000402000
        state:
          "$ref": "#/components/schemas/state"
        collector:
          "$ref": "#/components/schemas/collector"
      required:
      - id
      - note
      - create_timestamp
      - last_collect_timestamp
      - next_collect_timestamp
      - state
      - collector
    customer:
      type: object
      properties:
        name:
          type: string
          description: Name of the customer.
          example: Awesome Company Name
        callback:
          type: string
          description: Callback url at which the new invoices are sent.
          example: https://path.to/callback
      required:
      - name
      - callback
    state:
      type: object
      properties:
        index:
          type: number
          description: Index of the state. A negative index means that the state is in error. An index equal to max means that the process is finished.
          example: 2
        max:
          type: number
          description: Maximum index of the state. This is used to know the progress.
          example: 6
        title:
          type: string
          description: Title of the state.
          example: 2FA
        message:
          type: string
          description: Message to be displayed to the user.
          example: Please enter the code received by SMS.
      required:
      - index
      - max
      - title
      - message
    collector:
      type: object
      properties:
        id:
          type: string
          description: Id of the collector.
          example: free
        name:
          type: string
          description: Name of the collector.
          example: Free
        description:
          type: string
          description: Description of the collector.
          example: Free is a French telecommunications company
        instructions:
          type: string
          description: Instructions to setup the collector.
          example: Go to ... and do ...
        version:
          type: string
          description: Version of the collector.
          example: 1
        type:
          type: string
          description: Type of collector.
          enum: [web, api]
          example: web
        website:
          type: string
          description: Link to the website of the collector.
          format: uri
          example: https://www.free.fr
        logo:
          type: string
          description: Link to the logo of the collector.
          format: uri
          example: https://fr.wikipedia.org/wiki/Free_(entreprise)#/media/Fichier:Free_logo.svg
        useProxy:
          type: boolean
          description: Whether the collector uses a proxy or not.
          example: true
        params:
          type: array
          description: List of parameters that the collector requires.
          items:
            - type: object
              properties:
                type:
                  type: string
                  description: Type of the parameter.
                  enum: [string, number, boolean, enum]
                  example: string
                name:
                  type: string
                  description: Name of the parameter.
                  example: email
                placeholder:
                  type: string
                  description: Placeholder of the parameter.
                  example: Email address of the account
                mandatory:
                  type: boolean
                  description: Whether the parameter is mandatory or not.
                  example: true
              required:
              - type
              - name
              - placeholder
              - mandatory
            - type: object
              properties:
                type:
                  type: string
                  description: Type of the parameter.
                  enum: [string, number, boolean, enum]
                  example: string
                name:
                  type: string
                  description: Name of the parameter.
                  example: password
                placeholder:
                  type: string
                  description: Placeholder of the parameter.
                  example: Password of the account
                mandatory:
                  type: boolean
                  description: Whether the parameter is mandatory or not.
                  example: true
              required:
              - type
              - name
              - placeholder
              - mandatory
        entryUrl:
          type: string
          description: URL to the entry point of the collector. For collectors of type `web` only.
          example: https://www.mycollector.com/login
        baseUrl:
          type: string
          description: Base URL of the collector. For collectors of type `api` only.
          example: https://api.mycollector.com
      required:
      - id
      - name
      - description
      - version
      - type
      - website
      - logo
      - useProxy
      - params
    invoice:
      type: object
      properties:
        id:
          type: string
          description: Id of the invoice.
          example: 45FDD1544
        timestamp:
          type: integer
          description: Timestamp when the invoice was created in ms.
          example: 1731603196
        amount:
          type: string
          description: Amount of the invoice.
          example: 45.78€
        link:
          type: string
          description: Link from which the invoice was downloaded.
          example: https://mycollector/direct/link/to/my/invoice
        data:
          type: string
          description: Base64 encoded invoice.
          example: iVBORw0KGgoAAAAN...RU5ErkJggg==
        mimetype:
          type: string
          description: MIME type of the invoice.
          example: application/pdf
      required:
        - id
        - type
        - mimetype
        - timestamp
        - link
        - data
    error:
      type: object
      properties:
        type:
          type: string
          description: Type of the error.
          default: error
          exemple: error
          enum: [error]
        message:
          type: string
          description: Error message.
      required:
        - type
        - message
